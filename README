Money Smart Test

- Steps

1.) The first that i did was create the app with the command rails new moneysmarttest -d postgresql

2.) I installed the gem devise to users authentication

3.) I installed the libraries to use bootstrap 4 how design framework

3.) I Created the model,controller and helper Url to develop the logic of the problem

	3.1) Url model => on it i validated the presence, format and shorten url before created
	3.2) I used 4 methods generate_short_url, find_duplicate, new_url? & sanitize to be use on the Url Controller
	3.3) Url controller => on it i used the regular methods generated with scaffolding and i coded the stats method to use on the stats view to see the stats of each URL
	3.4) I changed the method create of the URL controller to call the methods on the Url model that i coded
	3.5) Url helper => i coded 2 methods env(url) & click_count(url) to see the stats of each url and used on the Url Controller.
	3.6) I did the association between url and users because one user could have many urls and one url belongs to one user

4.)Testing
	4.1) I installed the gem RSpec & Capybara to do the testing on the Url, User models. Validating the presence of the attributes, fields and formats of them.
	4.2) I was able to do more testing but for the time i couldn't, because i was configuring the cloud server for the deployment
5.) Github Repository
	5.1) i did a few commits but the complete explanation is here on this file with each used steps.
6.)Stats view
	6.1) I used jquery libraries to show the stats graph when the users click on the urls with different devices
	6.2) I did a method to show all the clicks on a specific url
7.) Amazon Web Services
	7.1) I configured an EC2 instance on amazon web services with ubuntu 16.04 and postgresql as database using nginx and passenger as web server
8.) I used datatable to design the table of urls on the Url Index view


Things to improve

	1.) With a little more time I could have added more information to the statistics of the urls, such as the countries from which users access, using their ips, the networks where the urls were shared and their users.
	2.) Could use security gems like tarantula to prevent sql injections to the application
	3.) I could use sidekiq to do the Simple, efficient background processing for the ruby application
	4.) Could use the rails_best_practices gem to analyzes code to find code smells: pieces of code that arenâ€™t technically bugs and offers suggestions to improve your code
	5.) I used before the gem capistrano to do the deployment on amazon web services, on this app i didn't for the time.